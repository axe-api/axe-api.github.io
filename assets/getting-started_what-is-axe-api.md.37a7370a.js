import{_ as s,c as a,o,a as n}from"./app.ff5939fe.js";const u=JSON.parse('{"title":"What is Axe API?","description":"","frontmatter":{},"headers":[{"level":2,"title":"Motivation","slug":"motivation","link":"#motivation","children":[]},{"level":2,"title":"Showcase","slug":"showcase","link":"#showcase","children":[]}],"relativePath":"getting-started/what-is-axe-api.md","lastUpdated":1671908681000}'),e={name:"getting-started/what-is-axe-api.md"},l=n(`<h1 id="what-is-axe-api" tabindex="-1">What is Axe API? <a class="header-anchor" href="#what-is-axe-api" aria-hidden="true">#</a></h1><p>Axe API is a <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a> framework that helps you create a <strong>Rest API</strong> in a declarative way quickly. ðŸª“</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>It has been written with <a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">TypeScript</a> and built on <a href="https://expressjs.com/" target="_blank" rel="noreferrer">Express</a> and <a href="https://knexjs.org/" target="_blank" rel="noreferrer">Knex.js</a>.</p></div><h2 id="motivation" tabindex="-1">Motivation <a class="header-anchor" href="#motivation" aria-hidden="true">#</a></h2><p>You would understand easily what you are going to code when you look at a bunch of database tables and their relations with each other, more or less. Because, as a developer, you already know that <em>Rest API</em> best practices.</p><p>Therefore I asked a simple question more than two years ago;</p><p><strong><em>&quot;Can we create a Rest API in a declarative way, and handle all endpoints automatically?&quot;</em></strong></p><p>As a result of our work, we have a framework called Axe API that provides a solution to analyze your API definitions and handle all of the endpoints.</p><p>Basically, you define your models which are your API definitions, and Axe API analyzes them and processes all of your endpoints instead of you.</p><h2 id="showcase" tabindex="-1">Showcase <a class="header-anchor" href="#showcase" aria-hidden="true">#</a></h2><p>Let&#39;s look at an example!</p><p>You have two database tables; <code>users</code> and <code>posts</code>. These tables are related to each other and we aim that create a <strong>Rest API</strong> for basic <strong>CRUD</strong> endpoints.</p><p>The only thing to do is creating models like the following example;</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Model</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">fillable</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[] </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">email</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">surname</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">posts</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IRelation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">hasMany</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Post</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Model</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">fillable</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[] </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">user</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IRelation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">belongsTo</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Tada! ðŸŽ‰</p><p>Your API is ready to process all of the following endpoints after those model definitions are done.</p><ul><li>[GET] <code>api/users</code></li><li>[POST] <code>api/users</code></li><li>[GET] <code>api/users/:id</code></li><li>[PUT] <code>api/users/:id</code></li><li>[DELETE] <code>api/users/:id</code></li><li>[GET] <code>api/users/:userId/posts</code></li><li>[POST] <code>api/users/:userId/posts</code></li><li>[GET] <code>api/users/:userId/posts/:id</code></li><li>[PUT] <code>api/users/:userId/posts/:id</code></li><li>[DELETE] <code>api/users/:userId/posts/:id</code></li></ul><p>This is the main power of Axe API. Nevertheless, it is not limited only to this power. There are many more features are waiting to discover. ðŸ’¡</p>`,19),p=[l];function t(r,c,i,y,F,D){return o(),a("div",null,p)}const h=s(e,[["render",t]]);export{u as __pageData,h as default};
