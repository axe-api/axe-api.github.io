import{_ as e,o as s,c as t,V as n}from"./chunks/framework.233b31c9.js";const o="/assets/axe-api-http-request-response-cycle.9b6c8a34.png",y=JSON.parse('{"title":"Request-Response Cycle","description":"","frontmatter":{},"headers":[],"relativePath":"learn/request-response-cycle.md","filePath":"learn/request-response-cycle.md"}'),r={name:"learn/request-response-cycle.md"},a=n('<h1 id="request-response-cycle" tabindex="-1">Request-Response Cycle <a class="header-anchor" href="#request-response-cycle" aria-label="Permalink to &quot;Request-Response Cycle&quot;">​</a></h1><p class="description"> In this section, we are going to talk about everything HTTP Request-Response cycle in Axe API. </p><ul class="intro"><li>You will learn</li><li>What is Request and Response?</li><li>What is the Request-Response cycle?</li><li>How does Axe API process the Request-Response cycle?</li></ul><h2 id="request-response" tabindex="-1">Request &amp; Response <a class="header-anchor" href="#request-response" aria-label="Permalink to &quot;Request &amp; Response&quot;">​</a></h2><p>In HTTP, a request is a client-initiated message sent to a server, specifying an action to be performed. It includes a <strong>method</strong> (e.g., <code>GET</code>, <code>POST</code>) and a target <strong>URL</strong>, optional <strong>headers</strong>, and sometimes a <strong>request body</strong>.</p><p>The server processes the request and generates a response. A response is the server&#39;s reply to the client&#39;s request, including an HTTP <strong>status code</strong>, <strong>headers</strong>, and often a <strong>response body</strong> containing requested data or an acknowledgment.</p><p><strong>Requests</strong> and <strong>responses</strong> form the foundation of communication in the HTTP protocol, allowing clients to retrieve information, submit data, and interact with servers in a standardized and structured manner.</p><h2 id="request-response-cycle-1" tabindex="-1">Request-Response cycle <a class="header-anchor" href="#request-response-cycle-1" aria-label="Permalink to &quot;Request-Response cycle&quot;">​</a></h2><p>The <strong>Request-Response cycle</strong> in HTTP represents the flow of communication between a client and a server. It starts when the client sends an HTTP request to the server, specifying the desired <strong>action</strong>, <strong>URL</strong>, <strong>headers</strong>, and sometimes a <strong>request body</strong>.</p><p>The server receives the request, processes it, and generates an HTTP response. The response includes an HTTP <strong>status code</strong>, <strong>headers</strong>, and often a <strong>response body</strong> containing requested <strong>data</strong> or an acknowledgment.</p><p>When we talk about the <strong>Request-Response cycle in Axe API</strong>, we mean the process in that Axe API handles the request and generates a response process.</p><h2 id="the-flow" tabindex="-1">The flow <a class="header-anchor" href="#the-flow" aria-label="Permalink to &quot;The flow&quot;">​</a></h2><p>The following schema demonstrates the Axe API Request-Response cycle for updating a resource route:</p><p><code>PUT api/v1/users/1</code></p><p><img src="'+o+'" alt="Axe API HTTP Request-Response Cycle"></p><p>By the schema, we can talk about four important parts; <strong>middleware</strong>, <strong>query</strong> and <strong>action</strong> phases, and <strong>serializers</strong>.</p><h3 id="middlewares" tabindex="-1">Middlewares <a class="header-anchor" href="#middlewares" aria-label="Permalink to &quot;Middlewares&quot;">​</a></h3><p><strong>Middleware</strong> refers to software components that sit between an application&#39;s core functionality and the underlying infrastructure. It provides common services such as <strong>authentication</strong>, <strong>logging</strong>, and <strong>error handling</strong>.</p><p>Middleware acts as a bridge, enabling communication and enhancing functionality between different components in a software system.</p><p>As you can see there are different types of middleware that you can use.</p><h3 id="query-action-phases" tabindex="-1">Query &amp; Action Phases <a class="header-anchor" href="#query-action-phases" aria-label="Permalink to &quot;Query &amp; Action Phases&quot;">​</a></h3><p>In Axe API, each HTTP request uses <strong>query</strong> or <strong>action</strong> phases. Sometimes, both phases can be used at the same time, depending on the <strong>handler type</strong>.</p><p>The <strong>Query Phase</strong> means that database <em>query operations</em>. The <strong>Action Phase</strong> means <em>data manipulations</em> like <strong><em>inserting</em></strong>, <strong><em>deleting</em></strong>, or <strong><em>updating</em></strong>.</p><p>On the right of the schema, you can see which handler support which phase.</p><p>For example, the <code>INSERT</code> handler doesn&#39;t provide the <strong>Query Phase</strong> because there is not anything to query before the inserting action.</p><p>Likewise, the <code>PAGINATE</code> handler doesn&#39;t provide the <strong>Action Phase</strong> because there is not any action (like <strong><em>inserting</em></strong>, <strong><em>deleting</em></strong>, <strong><em>updating</em></strong>) to be used.</p><p>You can use the <strong>hooks</strong> or the <strong>events</strong> at the same time during the phase (<strong><em>before</em></strong> or <strong><em>after</em></strong>) in each phase (<strong><em>Query</em></strong> or <strong><em>Action</em></strong>).</p><p>That allows you to add your application logic to the Request-Reponse cycle.</p><h3 id="serializers" tabindex="-1">Serializers <a class="header-anchor" href="#serializers" aria-label="Permalink to &quot;Serializers&quot;">​</a></h3><p>Serializers are functions that allow you to serialize data by your application logic. For example, you may uppercase all values, or convert item keys to <code>camelCase</code> by using a serializer function.</p><p>As you can see there are different types of serializers that you can use.</p><h2 id="next-step" tabindex="-1">Next step <a class="header-anchor" href="#next-step" aria-label="Permalink to &quot;Next step&quot;">​</a></h2><p>In this section, we tried to explain the general structure of the HTTP Request-Response cycle.</p><p>In the next section, you will learn more about middleware, hooks and events, and serializers.</p>',34),i=[a];function c(l,p,h,d,g,u){return s(),t("div",null,i)}const q=e(r,[["render",c]]);export{y as __pageData,q as default};
