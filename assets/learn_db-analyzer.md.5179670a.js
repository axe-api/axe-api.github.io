import{_ as a,o as e,c as s,V as n}from"./chunks/framework.c4102992.js";const m=JSON.parse('{"title":"How DB Analyzer works?","description":"","frontmatter":{},"headers":[],"relativePath":"learn/db-analyzer.md","filePath":"learn/db-analyzer.md"}'),o={name:"learn/db-analyzer.md"},t=n(`<h1 id="how-db-analyzer-works" tabindex="-1">How DB Analyzer works? <a class="header-anchor" href="#how-db-analyzer-works" aria-label="Permalink to &quot;How DB Analyzer works?&quot;">​</a></h1><p class="description"> Axe API is not just a passive framework that expects all the definitions from the developer. It is a very creative framework that helps developers to reduce mistakes in the development period. In this section, we are going to talk about the DB analyzer. </p><ul class="intro"><li>You will learn</li><li>What is DB Analyzer?</li><li>What DB Analyzer works?</li><li>What is the metadata?</li></ul><h2 id="analyzing-the-schema" tabindex="-1">Analyzing the schema <a class="header-anchor" href="#analyzing-the-schema" aria-label="Permalink to &quot;Analyzing the schema&quot;">​</a></h2><p>Axe API fetches the database schema structure in the <strong><em>initialization process</em></strong>, and keeps it in the memory to understand what kind of tables and data structures you have. It is named <strong>DB Analyzer</strong>.</p><p>It is designed to help developers to build the API with minimum errors.</p><p><a href="https://github.com/knex/knex-schema-inspector" target="_blank" rel="noreferrer">knex-schema-inspector</a> is used under the hood. Since <a href="https://knexjs.org/guide/" target="_blank" rel="noreferrer">knex</a> supports almost every modern relational database, it works perfectly for all of them.</p><h2 id="errors" tabindex="-1">Errors <a class="header-anchor" href="#errors" aria-label="Permalink to &quot;Errors&quot;">​</a></h2><p>Since the database schema is kept in memory, <strong><em>DB Analyzer</em></strong> checks your model definitions while you are developing the API.</p><p>DB Analyzers throws an error if you define something in your model, which is not found on the database schema.</p><p>Let&#39;s assume that you have a model like this;</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-zTbZD" id="tab-aBjFmp1" checked="checked"><label for="tab-aBjFmp1">User.ts</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-focused-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Model</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">axe-api</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Model</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">fillable</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line has-focus"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">surnamex</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> User</span><span style="color:#89DDFF;">;</span></span></code></pre></div></div></div><p>You would get the following error in your terminal if the <code>users</code> table doesn&#39;t have a column like <code>surnamex</code>.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">UNDEFINED_COLUMN</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">model</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">doesn</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">t have the following columns on the database; &quot;users.surnamex&quot;</span></span></code></pre></div><p>DB Analyzer checks every table and column definition.</p><p>Also, in the HTTP request handling process, it checks the column names if they are actually defined. That way, you won&#39;t get an undefined column error from the database server.</p><h2 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h2><p>Thanks to DB Analyzer, Axe API provides the correct database schema structure to display <strong><em>auto-created documentation</em></strong>.</p><p>You can use the following endpoint to get all <strong><em>API metadata</em></strong>, including the database schema.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">GET</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/metadata</span></span></code></pre></div><p>Also, you can use the following link to get metadata of the example Axe API project (Bookstore API):</p><p><a href="https://bookstore.axe-api.com/metadata" target="_blank" rel="noreferrer">bookstore.axe-api.com/metadata</a></p><h2 id="next-step" tabindex="-1">Next step <a class="header-anchor" href="#next-step" aria-label="Permalink to &quot;Next step&quot;">​</a></h2><p>In this section, we covered what is the DB Analyzer.</p><p>In the next chapter, we are going to talk about more advanced topics such as configuration, security, transactions, etc.</p>`,25),l=[t];function r(p,c,i,d,h,y){return e(),s("div",null,l)}const D=a(o,[["render",r]]);export{m as __pageData,D as default};
