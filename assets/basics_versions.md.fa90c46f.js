import{_ as e,o,c as l,b as a,d as s,e as p,a as t,r as c}from"./app.c9dd8490.js";const f=JSON.parse('{"title":"Versions","description":"","frontmatter":{},"headers":[{"level":2,"title":"Folder Structure","slug":"folder-structure","link":"#folder-structure","children":[]},{"level":2,"title":"URL Pattern","slug":"url-pattern","link":"#url-pattern","children":[]},{"level":2,"title":"Common database schema","slug":"common-database-schema","link":"#common-database-schema","children":[]}],"relativePath":"basics/versions.md","lastUpdated":1680728625000}'),r={name:"basics/versions.md"},i={id:"versions",tabindex:"-1"},C=a("a",{class:"header-anchor",href:"#versions","aria-hidden":"true"},"#",-1),d=t(`<p>Axe API supports multiple API versions on a database schema at the same time. You can customize your API and your custom logics for each version.</p><h2 id="folder-structure" tabindex="-1">Folder Structure <a class="header-anchor" href="#folder-structure" aria-hidden="true">#</a></h2><p>Axe API provides <code>v1</code> version by default. As a developer, you are able to create more version by adding a new version folder on the <code>app</code> folder. The initial structure of an Axe API project looks like this;</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Config</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Events</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Hooks</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Models</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config.ts</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">migrations</span></span>
<span class="line"></span></code></pre></div><p>The <code>app</code> folder contains two things;</p><ul><li>General API configuration (<code>config.ts</code>)</li><li>API version directories (<code>v1</code>, <code>v2</code>, <code>beta</code>, <code>alfa</code>)</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Every directory name is accepted as a new version of your API.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Version folder name must be alphanumeric.</p></div><p>The following example demonstrate that the API has two different version;</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Config</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Events</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Hooks</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Models</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Config</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Events</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Hooks</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Models</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config.ts</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">migrations</span></span>
<span class="line"></span></code></pre></div><h2 id="url-pattern" tabindex="-1">URL Pattern <a class="header-anchor" href="#url-pattern" aria-hidden="true">#</a></h2><p>Axe API uses the following URL pattern;</p><p><code>/{API_PREFIX}/{VERSION}/{MODEL}</code></p><ul><li><code>{API_PREFIX}</code>: The prefix of the API. It can be configured in <code>app/config.ts</code> file. Default value is <code>/api</code>.</li><li><code>{VERSION}</code>: The version folder name. It should be alphanumeric.</li><li><code>{MODEL}</code>: The plural version of the model name.</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The URL can be change by the model definition. For example: <code>/api/v1/users/:id/posts</code></p></div><h2 id="common-database-schema" tabindex="-1">Common database schema <a class="header-anchor" href="#common-database-schema" aria-hidden="true">#</a></h2><p>For each API version must use the same database schema. Creating a completely different Axe API project would be a better option if you want to use different database schema.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>There are only one <code>migrations</code> folder in your API project. It means that you can only manage one database schema at the same time.</p></div>`,18);function A(y,D,h,u,m,F){const n=c("Badge");return o(),l("div",null,[a("h1",i,[s("Versions "),p(n,{type:"tip",text:"^0.30.0"}),s(),C]),d])}const v=e(r,[["render",A]]);export{f as __pageData,v as default};
